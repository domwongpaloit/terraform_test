name: "CI & CD"

on:
  push:
    branches:
      - main
      - develop
    #  paths:
    #  - infra/**
  pull_request:
    branches:
      - main
      - develop
    #  paths:
    #  - infra/**

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  BUCKET_REGION: ${{ secrets.BUCKET_REGION }}

jobs:
  test_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          npm install
        working-directory: ./backend
      - name: Run Jest tests
        run: npm test
        working-directory: ./backend
      - name: Run Jest coverage
        run: npm run coverage
        working-directory: ./backend

  terraform:
    needs: test_backend
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest

    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
        id: extract_branch

      - name: Checkout the repository to the runner
        uses: actions/checkout@v3

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.5

      - name: Check AWS CLI Version
        shell: bash
        run: aws --version

      - name: Rebuild Production node_modules
        run: npm run build
        working-directory: ./backend

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE" -backend-config="key=${{ steps.extract_branch.outputs.branch }}" -backend-config="region=$BUCKET_REGION"
        working-directory: ./infra

      - name: Terraform format
        id: fmt
        run: terraform fmt -check
        working-directory: ./infra

      - name: Terraform validate
        id: validate
        run: terraform validate
        working-directory: ./infra

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ./infra

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ./infra
        if: github.event_name == 'push'
        run: terraform apply -var="stage=${{steps.extract_branch.outputs.branch}}" -auto-approve -input=false
